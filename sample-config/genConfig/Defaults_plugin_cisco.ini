# Generic network device sub-tree defaults
# Use with genDevConfig and Shinken SnmpBooster module
#
# This file is indetented using 4 space.
#
###############################################################################
#
# Setup the default variables that apply to all services that are defined
# within this part of the configuration file hierarchy.
#
# All variables can be overriden by a template loaded later in the process.
#
# Datasources define the type of data, the period, scaling and limits
#
###############################################################################

### Cisco switches and routers

[DATASOURCE]
    # OID's we'll be using in this tree
    Oidcpu1min                             = .1.3.6.1.4.1.9.2.1.57.0
    Oidcpu5min                             = .1.3.6.1.4.1.9.2.1.58.0
    OidtempInlet                           = .1.3.6.1.4.1.9.9.13.1.3.1.3.1
    OidtempOutlet                          = .1.3.6.1.4.1.9.9.13.1.3.1.3.2
    OidtempState                           = .1.3.6.1.4.1.9.9.13.1.3.1.6.1
    Oidmem5minUsed                         = .1.3.6.1.4.1.9.9.48.1.1.1.5.1
    Oidmem5minFree                         = .1.3.6.1.4.1.9.9.48.1.1.1.6.1
    OidprocessorRam                        = .1.3.6.1.4.1.9.3.6.6.0
    OidlocIfInRunts                        = .1.3.6.1.4.1.9.2.2.1.1.10
    OidlocIfInGiants                       = .1.3.6.1.4.1.9.2.2.1.1.11
    OidlocIfInCRC                          = .1.3.6.1.4.1.9.2.2.1.1.12
    OidlocIfInFrame                        = .1.3.6.1.4.1.9.2.2.1.1.13
    OidlocIfInOverrun                      = .1.3.6.1.4.1.9.2.2.1.1.14
    OidlocIfInIgnored                      = .1.3.6.1.4.1.9.2.2.1.1.15
    OidlocIfInAbort                        = .1.3.6.1.4.1.9.2.2.1.1.16
    OidlocIfResets                         = .1.3.6.1.4.1.9.2.2.1.1.17
    OidlocIfCarTrans                       = .1.3.6.1.4.1.9.2.2.1.1.21
    OidlocIfCollisions                     = .1.3.6.1.4.1.9.2.2.1.1.25
    OidlocIfInputQueueDrops                = .1.3.6.1.4.1.9.2.2.1.1.26
    OidlocIfOutputQueueDrops               = .1.3.6.1.4.1.9.2.2.1.1.27
    OidfrCircuitReceivedFECNs              = .1.3.6.1.2.1.10.32.2.1.4
    OidfrCircuitReceivedBECNs              = .1.3.6.1.2.1.10.32.2.1.5
    OidfrCircuitSentOctets                 = .1.3.6.1.2.1.10.32.2.1.7
    OidfrCircuitReceivedOctets             = .1.3.6.1.2.1.10.32.2.1.9
    
    OiddialCtlPeerStatsConnectTime         = .1.3.6.1.2.1.10.21.1.2.2.1.1
    OiddialCtlPeerStatsChargedUnits        = .1.3.6.1.2.1.10.21.1.2.2.1.2
    OiddialCtlPeerStatsSuccessCalls        = .1.3.6.1.2.1.10.21.1.2.2.1.3
    OiddialCtlPeerStatsFailCalls           = .1.3.6.1.2.1.10.21.1.2.2.1.4
    OiddialCtlPeerStatsAcceptCalls         = .1.3.6.1.2.1.10.21.1.2.2.1.5
    OiddialCtlPeerStatsRefuseCalls         = .1.3.6.1.2.1.10.21.1.2.2.1.6
    
    # OIDS For RTT RTRMON MIB which is used for point-to-point round-trip-time testing
    # This is also the mib that will permit us to validate if path through a specific
    # carrier is operational or not.
    
    OidrttMonLatestRttOperCompletionTime   = .1.3.6.1.4.1.9.9.42.1.2.10.1.1
    OidrttMonLatestRttOperSense            = .1.3.6.1.4.1.9.9.42.1.2.10.1.2
    OidrttMonLatestHTTPOperRTT             = .1.3.6.1.4.1.9.9.42.1.5.1.1.1
    OidrttMonLatestHTTPOperDNSRTT          = .1.3.6.1.4.1.9.9.42.1.5.1.1.2
    OidrttMonLatestHTTPOperTCPConnectRTT   = .1.3.6.1.4.1.9.9.42.1.5.1.1.3
    OidrttMonLatestHTTPOperTransactionRTT  = .1.3.6.1.4.1.9.9.42.1.5.1.1.4
    OidrttMonLatestHTTPOperSense           = .1.3.6.1.4.1.9.9.42.1.5.1.1.6
    OidrttMonLatestJitterOperMOS           = .1.3.6.1.4.1.9.9.42.1.5.2.1.42
    OidrttMonLatestJitterOperICPI          = .1.3.6.1.4.1.9.9.42.1.5.2.1.43
    OidrttMonLatestJitterOperRTTMin        = .1.3.6.1.4.1.9.9.42.1.5.2.1.4
    OidrttMonLatestJitterOperRTTMax        = .1.3.6.1.4.1.9.9.42.1.5.2.1.5
    OidrttMonLatestJitterOperPacketLossSD  = .1.3.6.1.4.1.9.9.42.1.5.2.1.26
    OidrttMonLatestJitterOperPacketLossDS  = .1.3.6.1.4.1.9.9.42.1.5.2.1.27
    OidrttMonLatestJitterOperPacketOutOfSequence       = .1.3.6.1.4.1.9.9.42.1.5.2.1.28
    OidrttMonLatestJitterOperPacketMIA     = .1.3.6.1.4.1.9.9.42.1.5.2.1.29
    OidrttMonLatestJitterOperPacketLateArrival     = .1.3.6.1.4.1.9.9.42.1.5.2.1.30
    #These aren't in the Cisco MIB yet (Ray Burkholder made up the names)
    OidrttMonLatestJitterOperAvgJitter     = .1.3.6.1.4.1.9.9.42.1.5.2.1.46
    OidrttMonLatestJitterOperAvgJitterSD   = .1.3.6.1.4.1.9.9.42.1.5.2.1.47
    OidrttMonLatestJitterOperAvgJitterDS   = .1.3.6.1.4.1.9.9.42.1.5.2.1.48
    OidrttMonLatestJitterOperAvgJitterOWSD  = .1.3.6.1.4.1.9.9.42.1.5.2.1.49
    OidrttMonLatestJitterOperAvgJitterOWDS  = .1.3.6.1.4.1.9.9.42.1.5.2.1.50
    
    # OIDS For Altiga VPN Concentrators 3030 3060
    
    OidvpnCPUtemp                          = .1.3.6.1.4.1.3076.2.1.2.22.1.29
    OidvpnCagetemp                         = .1.3.6.1.4.1.3076.2.1.2.22.1.33
    OidvpnCPUutil                          = .1.3.6.1.4.1.3076.2.1.2.25.1.2
    OidvpnActivePhase1ipSecSessions        = .1.3.6.1.4.1.9.9.171.1.2.1.1
    #     OidalActiveSessionCount               = .1.3.6.1.4.1.3076.2.1.2.17.1.1
    OidalTotalSessionCount                 = .1.3.6.1.4.1.3076.2.1.2.17.1.2
    OidalActiveLanToLanSessionCount        = .1.3.6.1.4.1.3076.2.1.2.17.1.7
    OidalActiveManagementSessionCount      = .1.3.6.1.4.1.3076.2.1.2.17.1.8
    OidalActiveRemoteAccessSessionCount    = .1.3.6.1.4.1.3076.2.1.2.17.1.9
    OidalActiveSessionMaxUsers             = .1.3.6.1.4.1.3076.2.1.2.17.1.4
    OidalPptpStatsTotalSessions            = .1.3.6.1.4.1.3076.2.1.2.3.1.8
    
    
    ### OIDS For Aironet Wireless Access Point
    
    OidClientsAssociated                   = .1.3.6.1.4.1.522.3.12.1.8
    OidClientsTotal                        = .1.3.6.1.4.1.522.3.12.1.7
    OidAPCount                             = .1.3.6.1.4.1.522.3.12.1.13
    OidawcFtBridge                         = .1.3.6.1.4.1.522.3.12.1.9
    OidawcFtBridgeSelf                     = .1.3.6.1.4.1.522.3.12.1.10
    
    ### OIDS For PIX firewalls global firewall connections
    
    OidpixConnections                      = .1.3.6.1.4.1.9.9.147.1.2.2.2.1.5.40.6
    OidaByteBlocksFree                     = .1.3.6.1.4.1.9.9.147.1.2.2.1.1.4.4.8
    OidbByteBlocksFree                     = .1.3.6.1.4.1.9.9.147.1.2.2.1.1.4.80.8
    OidcByteBlocksFree                     = .1.3.6.1.4.1.9.9.147.1.2.2.1.1.4.256.8
    OiddByteBlocksFree                     = .1.3.6.1.4.1.9.9.147.1.2.2.1.1.4.1550.8
    #OideByteBlocksFree                     .1.3.6.1.4.1.9.9.147.1.2.2.1.1.4.2560.8
    
    ### OIDS For traffic shaping using CAR on Cisco IOS Routers
    
    OidccarStatSwitchedPkts                = .1.3.6.1.4.1.9.9.113.1.2.1.1.1
    OidccarStatSwitchedBytes               = .1.3.6.1.4.1.9.9.113.1.2.1.1.2
    OidccarStatFilteredPkts                = .1.3.6.1.4.1.9.9.113.1.2.1.1.3
    OidccarStatFilteredBytes               = .1.3.6.1.4.1.9.9.113.1.2.1.1.4
    
    ### OIDS For traffic shaping using CAR on Cisco IOS Routers
    
    OidcbQosCMPrePolicyByte                = .1.3.6.1.4.1.9.9.166.1.15.1.1.5
    OidcbQosCMPrePolicyByte64              = .1.3.6.1.4.1.9.9.166.1.15.1.1.6
    OidcbQosCMPostPolicyByte               = .1.3.6.1.4.1.9.9.166.1.15.1.1.9
    OidcbQosCMPostPolicyByte64             = .1.3.6.1.4.1.9.9.166.1.15.1.1.10
    OidcbQosCMPrePolicyPkt                 = .1.3.6.1.4.1.9.9.166.1.15.1.1.2
    OidcbQosCMPrePolicyPkt64               = .1.3.6.1.4.1.9.9.166.1.15.1.1.3
    OidcbQosCMDropPkt                      = .1.3.6.1.4.1.9.9.166.1.15.1.1.13
    OidcbQosCMDropPkt64                    = .1.3.6.1.4.1.9.9.166.1.15.1.1.14
    OidcbQosCMDropByte                     = .1.3.6.1.4.1.9.9.166.1.15.1.1.16
    OidcbQosCMDropByte64                   = .1.3.6.1.4.1.9.9.166.1.15.1.1.17
    
    # These are from the Cisco Catalyst MIB
    
    OidentSensorValue                      = .1.3.6.1.4.1.9.9.91.1.1.1.1.4
    OidsysTraffic                          = .1.3.6.1.4.1.9.5.1.1.8.0
    OidchassisPs1Status                    = .1.3.6.1.4.1.9.5.1.2.4.0
    OidchassisPs2Status                    = .1.3.6.1.4.1.9.5.1.2.7.0
    OidchassisFanStatus                    = .1.3.6.1.4.1.9.5.1.2.9.0
    OidchassisTempAlarm                    = .1.3.6.1.4.1.9.5.1.2.13.0
    
    OidbandwidthUsageCurrent               = .1.3.6.1.4.1.437.1.1.3.7.1.0
    OidbandwidthUsagePeak                  = .1.3.6.1.4.1.437.1.1.3.7.6.1.3.1
    OidsysInfoUtilDisplay                  = .1.3.6.1.4.1.437.1.1.3.1.9.0
    
    # Cisco Chassis & PIX CPU information
    
    OidciscoMemoryPoolName                 = .1.3.6.1.4.1.9.9.48.1.1.1.2
    OidciscoMemoryPoolUsed                 = .1.3.6.1.4.1.9.9.48.1.1.1.5
    OidciscoMemoryPoolFree                 = .1.3.6.1.4.1.9.9.48.1.1.1.6
    
    OidcpmCPUTotalPhysicalIndex            = .1.3.6.1.4.1.9.9.109.1.1.1.1.2
    OidcpmCPUTotal1min                     = .1.3.6.1.4.1.9.9.109.1.1.1.1.4
    OidcpmCPUTotal5min                     = .1.3.6.1.4.1.9.9.109.1.1.1.1.5
    OidcpmCPUTotal1minRev                  = .1.3.6.1.4.1.9.9.109.1.1.1.1.7
    OidcpmCPUTotal5minRev                  = .1.3.6.1.4.1.9.9.109.1.1.1.1.8
    
    # Datasource names, DS as they are referred to in the DSTEMPLATE
    
    [[cpu1min]]
        ds_type	=	GAUGE
        ds_oid	=	$Oidcpu1min
    [[cpu5min]]
        ds_type	=	GAUGE
        ds_oid	=	$Oidcpu5min
    [[tempInlet]]
        ds_type	=	GAUGE
        ds_oid	=	$OidtempInlet
    [[tempOutlet]]
        ds_type	=	GAUGE
        ds_oid	=	$OidtempOutlet
    [[tempState]]
        ds_type	=	GAUGE
        ds_oid	=	$OidtempState
    [[mem5minUsed]]
        ds_type	=	GAUGE
        ds_oid	=	$Oidmem5minUsed
    [[mem5minFree]]
        ds_type	=	GAUGE
        ds_oid	=	$Oidmem5minFree
    [[processorRam]]
        ds_type	=	GAUGE
        ds_oid	=	$OidprocessorRam
    
    [[locIfInRunts]]
        ds_oid	=	$OidlocIfInRunts.%(instance)s
    [[locIfInGiants]]
        ds_oid 	=	$OidlocIfInGiants.%(instance)s
    [[locIfInCRC]]
        ds_oid 	=	$OidlocIfInCRC.%(instance)s
    [[locIfInFrame]]
        ds_oid 	=	$OidlocIfInFrame.%(instance)s
    [[locIfInOverrun]]
        ds_oid 	=	$OidlocIfInOverrun.%(instance)s
    [[locIfInIgnored]]
        ds_oid 	=	$OidlocIfInIgnored.%(instance)s
    [[locIfInAbort]]
        ds_oid 	=	$OidlocIfInAbort.%(instance)s
    [[locIfResets]]
        ds_oid 	=	$OidlocIfResets.%(instance)s
    [[locIfCarTrans]]
        ds_oid 	=	$OidlocIfCarTrans.%(instance)s
    [[locIfCollisions]]
        ds_oid 	=	$OidlocIfCollisions.%(instance)s
    [[locIfInputQueueDrops]]
        ds_oid 	=	$OidlocIfInputQueueDrops.%(instance)s
    [[locIfOutputQueueDrops]]
        ds_oid 	=	$OidlocIfOutputQueueDrops.%(instance)s
    
    [[frCircuitReceivedFECNs]]
        # instance is formed of: %inst%.%dlci%
        #ds_oid	=	$OidfrCircuitReceivedFECNs.%(instance)s
    [[frCircuitReceivedBECNs]]
        # instance is formed of: %inst%.%dlci%
        ds_oid	=	$OidfrCircuitReceivedBECNs.%(instance)s
    [[frCircuitSentOctets]]
        # instance is formed of: %inst%.%dlci%
        ds_oid	=	$OidfrCircuitSentOctets.%(instance)s
    [[frCircuitReceivedOctets]]
        # instance is formed of: %inst%.%dlci%
        ds_oid	=	$OidfrCircuitReceivedOctets.%(instance)s
    
    [[dialCtlPeerStatsConnectTime]]
        # instance is formed of: %peer-id%.%inst%
        ds_oid	=	$OiddialCtlPeerStatsConnectTime.%(instance)s
    [[dialCtlPeerStatsChargedUnits]]
        # instance is formed of: %peer-id%.%inst%
        ds_oid	=	$OiddialCtlPeerStatsChargedUnits.%(instance)s
    [[dialCtlPeerStatsSuccessCalls]]
        # instance is formed of: %peer-id%.%inst%
        ds_oid	=	$OiddialCtlPeerStatsSuccessCalls.%(instance)s
    [[dialCtlPeerStatsFailCalls]]
        # instance is formed of: %peer-id%.%inst%
        ds_oid	=	$OiddialCtlPeerStatsFailCalls.%(instance)s
    [[dialCtlPeerStatsAcceptCalls]]
        # instance is formed of: %peer-id%.%inst%
        ds_oid	=	$OiddialCtlPeerStatsAcceptCalls.%(instance)s
    [[dialCtlPeerStatsRefuseCalls]]
        # instance is formed of: %peer-id%.%inst%
        ds_oid	=	$OiddialCtlPeerStatsRefuseCalls.%(instance)s
    
    # Round-Trip-Time counters for last value and last operational code (ok or not)
    
    [[rttMonLatestFtpRttOperCompletionTime]]
        ds_type	=	GAUGE
        ds_oid       =       $OidrttMonLatestRttOperCompletionTime.%(instance)s
    [[rttMonLatestRttOperCompletionTime]]
        ds_type	=	GAUGE
        ds_oid       =       $OidrttMonLatestRttOperCompletionTime.%(instance)s
    [[rttMonLatestRttOperSense]]
        ds_type	=	GAUGE
        ds_oid       =       $OidrttMonLatestRttOperSense.%(instance)s
    [[rttMonLatestHTTPOperRTT]]
        ds_type	=	GAUGE
        ds_oid       =       $OidrttMonLatestHTTPOperRTT.%(instance)s
    [[rttMonLatestHTTPOperDNSRTT]]
        ds_type	=	GAUGE
        ds_oid       =       $OidrttMonLatestHTTPOperDNSRTT.%(instance)s
    [[rttMonLatestHTTPOperTCPConnectRTT]]
        ds_type	=	GAUGE
        ds_oid       =       $OidrttMonLatestHTTPOperTCPConnectRTT.%(instance)s
    [[rttMonLatestHTTPOperTransactionRTT]]
        ds_type	=	GAUGE
        ds_oid       =       $OidrttMonLatestHTTPOperTransactionRTT.%(instance)s
    [[rttMonLatestHTTPOperSense]]
        ds_type	=	GAUGE
        ds_oid       =       $OidrttMonLatestHTTPOperSense.%(instance)s
    
    [[rttMonLatestJitterOperMOS]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperMOS.%(instance)s
    [[rttMonLatestJitterOperICPI]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperICPI.%(instance)s
    [[rttMonLatestJitterOperRTTMin]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperRTTMin.%(instance)s
    [[rttMonLatestJitterOperRTTMax]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperRTTMax.%(instance)s
    [[rttMonLatestJitterOperPacketLossSD]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperPacketLossSD.%(instance)s
    [[rttMonLatestJitterOperPacketLossDS]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperPacketLossDS.%(instance)s
    [[rttMonLatestJitterOperPacketOutOfSequence]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperPacketOutOfSequence.%(instance)s
    [[rttMonLatestJitterOperPacketMIA]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperPacketMIA.%(instance)s
    [[rttMonLatestJitterOperPacketLateArrival]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperPacketLateArrival.%(instance)s
    [[rttMonLatestJitterOperAvgJitter]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperAvgJitter.%(instance)s
    [[rttMonLatestJitterOperAvgJitterSD]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperAvgJitterSD.%(instance)s
    [[rttMonLatestJitterOperAvgJitterDS]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperAvgJitterDS.%(instance)s
    [[rttMonLatestJitterOperAvgJitterOWSD]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperAvgJitterOWSD.%(instance)s
    [[rttMonLatestJitterOperAvgJitterOWDS]]
        ds_type     =       GAUGE
        ds_oid      =       $OidrttMonLatestJitterOperAvgJitterOWDS.%(instance)s
    
    
    # Round-Trip-Time counters for last value and last operational code (ok or not)
    
    
    #Datasources for Altiga VPN 3030 and 3060 boxes
    
    [[vpnCPUtemp]]
        ds_type	=	GAUGE
        ds_oid	=	$OidvpnCPUtemp.%(instance)s
    [[vpnCagetemp]]
        ds_type	=	GAUGE
        ds_oid	=	$OidvpnCagetemp.%(instance)s
    [[vpnCPUutil]]
        ds_type	=	GAUGE
        ds_oid	=	$OidvpnCPUutil.%(instance)s
    [[vpnActivePhase1ipSecSessions]]
        ds_type	=	GAUGE
        ds_oid	=	$OidvpnActivePhase1ipSecSessions.%(instance)s
    [[alTotalSessionCount]]
        ds_oid	=	$OidalTotalSessionCount.%(instance)s
    [[alActiveLanToLanSessionCount]]
        ds_type	=	GAUGE
        ds_oid	=	$OidalActiveLanToLanSessionCount.%(instance)s
    [[alActiveManagementSessionCount]]
        ds_type	=	GAUGE
        ds_oid	=	$OidalActiveManagementSessionCount.%(instance)s
    [[alActiveRemoteAccessSessionCount]]
        ds_type	=	GAUGE
        ds_oid	=	$OidalActiveRemoteAccessSessionCount.%(instance)s
    [[alActiveSessionMaxUsers]]
        ds_type	=	GAUGE
        ds_oid	=	$OidalActiveSessionMaxUsers.%(instance)s
    [[alPptpStatsTotalSessions]]
        ds_oid	=	$OidalPptpStatsTotalSessions.%(instance)s
    
    ### Datasources for Cisco Aironet Wireless Access Points
    
    [[Clients-Associated]]
        ds_type     =   GAUGE
        ds_oid       =   $OidClientsAssociated.%(instance)s

    
    [[Clients-Total]]
        ds_type     =   GAUGE
        ds_oid       =   $OidClientsTotal.%(instance)s

    
    [[AccessPoints]]
        ds_type     =   GAUGE
        ds_oid       =   $OidAPCount.%(instance)s

    
    [[Bridges-Associated]]
        ds_type     =   GAUGE
        ds_oid       =   $OidawcFtBridgeSelf.%(instance)s

    
    [[Bridges-Total]]
        ds_type     =   GAUGE
        ds_oid       =   $OidawcFtBridge.%(instance)s

    
    [[pixConnections]]
        ds_type     =   GAUGE
        ds_oid       =   $OidpixConnections

    
    [[aByteBlocksFree]]
        ds_type     =   GAUGE
        ds_oid       =   $OidaByteBlocksFree

    
    [[bByteBlocksFree]]
        ds_type     =   GAUGE
        ds_oid       =   $OidbByteBlocksFree

    
    [[cByteBlocksFree]]
        ds_type     =   GAUGE
        ds_oid       =   $OidcByteBlocksFree

    
    [[dByteBlocksFree]]
        ds_type     =   GAUGE
        ds_oid       =   $OiddByteBlocksFree

    
    #datasource eByteBlocksFree
    #   ds_type     =   GAUGE
    #   ds_oid       =   $OideByteBlocksFree
    
    [[ccarStatSwitchedPkts]]
        # instance is formed of: %peer-id%.%rest%
        ds_oid       =       $OidccarStatSwitchedPkts.%(instance)s
    
    [[ccarStatSwitchedBytes]]
        # instance is formed of: %peer-id%.%rest%
        ds_oid       =       $OidccarStatSwitchedBytes.%(instance)s
    
    [[ccarStatFilteredPkts]]
        # instance is formed of: %peer-id%.%rest%
        ds_oid       =       $OidccarStatFilteredPkts.%(instance)s
    
    [[ccarStatFilteredBytes]]
        # instance is formed of: %peer-id%.%rest%
        ds_oid       =       $OidccarStatFilteredBytes.%(instance)s
    
    [[cbQosCMPrePolicyByte]]
        # instance is formed of: %peer-id%.%rest%
        ds_oid       =       $OidcbQosCMPrePolicyByte.%(instance)s
    [[cbQosCMPrePolicyByte64]]
        ds_type = DERIVE64
        ds_oid       =       $OidcbQosCMPrePolicyByte64.%(instance)s
    [[cbQosCMPostPolicyByte]]
        ds_oid       =       $OidcbQosCMPostPolicyByte.%(instance)s
    [[cbQosCMPostPolicyByte64]]
        ds_type = DERIVE64
        ds_oid       =       $OidcbQosCMPostPolicyByte64.%(instance)s
    [[cbQosCMPrePolicyPkt]]
        ds_oid       =       $OidcbQosCMPrePolicyPkt.%(instance)s
    [[cbQosCMPrePolicyPkt64]]
        ds_type = DERIVE64
        ds_oid       =       $OidcbQosCMPrePolicyPkt64.%(instance)s
    [[cbQosCMDropPkt]]
        ds_oid       =       $OidcbQosCMDropPkt.%(instance)s
    [[cbQosCMDropPkt64]]
        ds_type = DERIVE64
        ds_oid       =       $OidcbQosCMDropPkt64.%(instance)s
    [[cbQosCMDropByte]]
        ds_oid       =       $OidcbQosCMDropByte.%(instance)s
    [[cbQosCMDropByte64]]
        ds_type = DERIVE64
        ds_oid       =       $OidcbQosCMDropByte64.%(instance)s
    
    
    [[chassisPs1Status]]
        ds_oid   = $OidchassisPs1Status
        ds_type = GAUGE
    
    [[chassisPs2Status]]
        ds_oid   = $OidchassisPs2Status
        ds_type = GAUGE
    
    [[chassisFanStatus]]
        ds_oid   = $OidchassisFanStatus
        ds_type = GAUGE
    
    [[chassisTempAlarm]]
        ds_oid   = $OidchassisTempAlarm
        ds_type = GAUGE
    
    [[cpmCPUTotal1min]]
        ds_oid   = $OidcpmCPUTotal1min.%(instance)s
        ds_type = GAUGE
    
    [[cpmCPUTotal5min]]
        ds_oid   = $OidcpmCPUTotal5min.%(instance)s
        ds_type = GAUGE
    
    [[ciscoMemoryPoolUsed]]
        ds_oid   = $OidciscoMemoryPoolUsed.%(instance)s
        ds_type = GAUGE
    
    [[ciscoMemoryPoolFree]]
        ds_oid   = $OidciscoMemoryPoolFree.%(instance)s
        ds_type = GAUGE
    
    [[slotcpu1min]]
        ds_oid   = $OidcpmCPUTotal1minRev.%(instance)s
        ds_type = GAUGE
    
    [[slotcpu5min]]
        ds_oid   = $OidcpmCPUTotal5minRev.%(instance)s
        ds_type = GAUGE
    
    [[bandwidthUsageCurrent]]
        ds_oid   = $OidbandwidthUsageCurrent
        ds_type = GAUGE
    
    [[bandwidthUsagePeak]]
        ds_oid   = $OidbandwidthUsagePeak
        ds_type = GAUGE
    
    [[sysInfoUtilDisplay]]
        ds_oid   = $OidsysInfoUtilDisplay
        ds_type = GAUGE

###############################################################################
#
# DSTEMPLATE are definitions that will tell the collection engine what to retrieve
# from the device, and how they should be displayed. Each service that is defined
# in a Shinken configuration file should be associated with a DSTEMPLATE.
#
# DSTEMPLATE is optional in the target definition as you may not want to pull
# data for it. Examples are Chassis's of devices for which the OIDs
# haven't been detailed yet(temperature, cpu, memory). 
#
###############################################################################

[DSTEMPLATE]
    [[Cisco-7000-Router]]
        ds          = 	"""cpu1min, cpu5min, tempInlet, tempOutlet, 
        mem5minUsed, mem5minFree, processorRam"""
        graph        = 	"""cpu: cpu1min cpu5min,
        temperature: tempInlet tempOutlet,
        memory: mem5minUsed mem5minFree processorRam"""
    
    [[Cisco-7200-Router]]
        ds          = 	"""cpu1min, cpu5min, tempInlet, tempOutlet, 
        mem5minUsed, mem5minFree, processorRam"""
        graph        = 	"""cpu: cpu1min cpu5min,
        temperature: tempInlet tempOutlet,
        memory: mem5minUsed mem5minFree processorRam"""
    
    [[Cisco-7500-Router]]
        ds          = 	"""cpu1min, cpu5min, tempInlet, tempOutlet, 
        mem5minUsed, mem5minFree, processorRam"""
        graph        = 	"""cpu: cpu1min cpu5min,
        temperature: tempInlet tempOutlet,
        memory: mem5minUsed mem5minFree processorRam"""
    [[Cisco-2800-Router]]
        ds              =       "cpu1min, cpu5min, tempInlet, tempState, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        temperature: tempInlet tempState,
        memory: mem5minUsed mem5minFree processorRam"""
    
    [[Cisco-1200-AP]]
        ds              =       "mem5minUsed, mem5minFree, processorRam"
        graph            =       "memory: mem5minUsed mem5minFree processorRam"
    
    # 3600 routers do not report temperature -- they only
    # report tempterature states:
    #               normal(1),
    #               warning(2),
    #               critical(3),
    #               shutdown(4),
    #               notPresent(5) 
    
    [[Cisco-3600-Router]]
        ds		=	"cpu1min, cpu5min, tempState, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        tempAlarm: tempState,
        memory: mem5minUsed mem5minFree processorRam"""
    
    [[Cisco-4500-Router]]
        ds		=	"cpu1min, cpu5min, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        memory: mem5minUsed mem5minFree processorRam"""
    
    [[Cisco-2600-Router]]
        ds		=	"cpu1min, cpu5min, tempState, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        tempAlarm: tempState,
        memory: mem5minUsed mem5minFree processorRam"""
    
    # 800 and 2500 routers don't even report the temperature. Feh.
    
    [[Cisco-2500-Router]]
        ds		=	"cpu1min, cpu5min, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        memory: mem5minUsed mem5minFree"""
    
    [[Cisco-800-Router]]
        ds              =       "cpu1min, cpu5min, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        memory: processorRam"""
    
    # If all else failes, assume that all Ciscos at least return CPU and memory.
    
    [[Cisco-Generic-Router]]
        ds		=	"cpu1min, cpu5min, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        memory: mem5minUsed mem5minFree processorRam"""
    
    [[Cisco-Unknown-Router]]
        ds		=	"cpu1min, cpu5min, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        memory: mem5minUsed mem5minFree processorRam"""
    
    [[Cisco-PIX-Firewall]]
        ds		=	"cpmCPUTotal1min, cpmCPUTotal5min, mem5minUsed, mem5minFree"
        graph        = 	"""cpu: cpmCPUTotal1min cpmCPUTotal5min,
        memory: mem5minUsed mem5minFree"""
        
    [[Cisco-ASA-Firewall]]
        ds		=	"cpmCPUTotal1min, cpmCPUTotal5min, mem5minUsed, mem5minFree"
        graph        = 	"""cpu: cpmCPUTotal1min cpmCPUTotal5min,
        memory: mem5minUsed mem5minFree"""
    
    [[Cisco-PIX-Firewall-No-CPU]]
        ds		=	"mem5minUsed, mem5minFree"
        graph	=	"memory: mem5minUsed mem5minFree"
    
    [[Cisco-Terminal]]
        ds          = 	sysDescr
        graph        = 	""
    
    [[Cisco-1600-Router]]
        ds		=	"cpu1min, cpu5min, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        memory: mem5minUsed mem5minFree processorRam"""
    
    [[Cisco-1700-Router]]
        ds		=	"cpu1min, cpu5min, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        memory: mem5minUsed mem5minFree processorRam"""
    
    # Catalyst 3550 switches return CPU and memory.
    [[Catalyst-3550-Switch]]
        ds		=	"cpu1min, cpu5min, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        memory: mem5minUsed mem5minFree processorRam"""
    
    # Catalyst 2950 switches return CPU and memory.
    [[Catalyst-2950-Switch]]
        ds		=	"cpu1min, cpu5min, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        memory: mem5minUsed mem5minFree processorRam"""
    
    # Catalyst 1900 switches return CPU and memory.
    [[Catalyst-1900-Switch]]
        ds		=	"bandwidthUsageCurrent, bandwidthUsagePeak, sysInfoUtilDisplay"
        graph        = 	"""bandwidth: bandwidthUsageCurrent bandwidthUsagePeak,
        utilization: sysInfoUtilDisplay"""
    
    
    # Catalyst 2900XL and 3500XL switchs return CPU and memory.
    
    [[Catalyst-XL-Switch]]
        ds		=	"cpu1min, cpu5min, mem5minUsed, mem5minFree, processorRam"
        graph        = 	"""cpu: cpu1min cpu5min,
        memory: mem5minUsed mem5minFree processorRam"""
    
    [[Catalyst-Generic-Switch]]
        ds  =   "chassisTempAlarm, chassisFanStatus, chassisPs1Status, chassisPs2Status"
        graph        = 	"""temp: chassisTempAlarm chassisFanStatus,
        power: chassisPs1Status chassisPs2Status"""
    
    ### Cisco Altiga VPN 3000 Concentrators
    
    [[Cisco-vpn3000]]
        ds		=	"vpnCPUutil, vpnCagetemp, vpnCPUtemp"
        graph        = 	"""cpu: vpnCPUutil,
        temperature: vpnCagetemp vpnCPUtemp"""
    
    [[Cisco-vpn-tunnels]]
        ds          = 	"""vpnActivePhase1ipSecSessions, 
        alTotalSessionCount, alActiveSessionMaxUsers, alActiveManagementSessionCount, alActiveLanToLanSessionCount, alActiveRemoteAccessSessionCount, alPptpStatsTotalSessions"""
        graph        = 	"""sessionsPptp: alPptpStatsTotalSessions,
        sessionsIpSec: vpnActivePhase1ipSecSessions,
        sessionsActive: alActiveLanToLanSessionCount alActiveManagementSessionCount alActiveRemoteAccessSessionCount alActiveSessionMaxUsers"""
    
    
    ### Cisco Aironet Wireless Access Points
    
    [[Cisco-Aironet-Associations]]
        ds		=	"Clients-Associated, Clients-Total, AccessPoints, Bridges-Associated, Bridges-Total"
        graph		=	"Associations: Clients-Total Clients-Associated AccessPoints Bridges-Associated Bridges-Total"
    
    ### SAA (RTR) Cisco service agent types
    
    [[ftpAppl]]
        ds		=	"rttMonLatestFtpRttOperCompletionTime, rttMonLatestRttOperSense"
        graph	=	"rttAgent: rttMonLatestFtpRttOperCompletionTime rttMonLatestRttOperSense"
    
    [[ipIcmpEcho]]
        ds		=	"rttMonLatestRttOperCompletionTime, rttMonLatestRttOperSense"
        graph	=	"rttAgent: rttMonLatestRttOperCompletionTime rttMonLatestRttOperSense"
    
    [[httpAppl]]
        ds          = 	"""rttMonLatestHTTPOperRTT, rttMonLatestHTTPOperSense, 
        rttMonLatestHTTPOperDNSRTT, rttMonLatestHTTPOperTCPConnectRTT, 
        rttMonLatestHTTPOperTransactionRTT"""
        graph        = 	"""rttHttp: rttMonLatestHTTPOperRTT rttMonLatestHTTPOperSense 
        rttMonLatestHTTPOperTCPConnectRTT rttMonLatestHTTPOperDNSRTT,
        rttPreHttp: rttMonLatestHTTPOperTCPConnectRTT rttMonLatestHTTPOperSense rttMonLatestHTTPOperDNSRTT"""
    
    [[ipUdpEchoAppl]]
        ds	=	"rttMonLatestRttOperCompletionTime, rttMonLatestRttOperSense"
        graph	=	"rttAgent: rttMonLatestRttOperCompletionTime rttMonLatestRttOperSense"
    
    [[jitterAppl]]
        ds          = 	"""rttMonLatestRttOperCompletionTime, rttMonLatestJitterOperRTTMin, rttMonLatestJitterOperRTTMax, rttMonLatestRttOperSense,
        rttMonLatestJitterOperMOS, rttMonLatestJitterOperICPI,
        rttMonLatestJitterOperPacketLossSD, rttMonLatestJitterOperPacketLossDS, rttMonLatestJitterOperPacketOutOfSequence,
        rttMonLatestJitterOperPacketMIA, rttMonLatestJitterOperPacketLateArrival,
        rttMonLatestJitterOperAvgJitter,
        rttMonLatestJitterOperAvgJitterSD, rttMonLatestJitterOperAvgJitterDS,
        rttMonLatestJitterOperAvgJitterOWSD, rttMonLatestJitterOperAvgJitterOWDS"""
        graph        = 	"""rttAgent: rttMonLatestRttOperCompletionTime rttMonLatestJitterOperRTTMin rttMonLatestJitterOperRTTMax,
    
        rttOper:  rttMonLatestRttOperSense,
        rttCalcs:  rttMonLatestJitterOperICPI rttMonLatestJitterOperMOS,
        rttLoss:  rttMonLatestJitterOperPacketLossSD rttMonLatestJitterOperPacketLossDS,
        rttError:  rttMonLatestJitterOperPacketOutOfSequence
        rttMonLatestJitterOperPacketMIA rttMonLatestJitterOperPacketLateArrival,
        rttJitter: rttMonLatestJitterOperAvgJitter
        rttMonLatestJitterOperAvgJitterSD rttMonLatestJitterOperAvgJitterDS
        rttMonLatestJitterOperAvgJitterOWSD rttMonLatestJitterOperAvgJitterOWDS"""
    
    # Get more information from:
    # http://www.cisco.com/en/US/partner/products/ps6350/products_configuration_guide_chapter09186a0080441850.html#wp1052080
    # http://www.cisco.com/en/US/partner/products/sw/iosswrel/ps1839/products_feature_guide09186a0080087c58.html
    
    
    ### PIX NUmber of connections globally
    
    [[Cisco-pix-stats]]
        ds               =   "pixConnections, aByteBlocksFree, bByteBlocksFree, cByteBlocksFree,  dByteBlocksFree"
        graph        = 	"""pixConnections: pixConnections,
        freeBlocks: aByteBlocksFree bByteBlocksFree cByteBlocksFree dByteBlocksFree"""
    
    [[switch-layer2]]
        ds          = 	"""cseL2ForwardedTotalPkts,
        cseL2NewAddressLearns,
        cseL2AddrLearnFailures,
        cseL2DstAddrLookupMisses"""
        graph        = 	"""L2TotalPkts:     cseL2ForwardedTotalPkts,
        L2AddrStats:    cseL2NewAddressLearns
        cseL2AddrLearnFailures
        cseL2DstAddrLookupMisses"""
    
    [[switch-cpu]]
        ds    =   "cpmCPUTotal5min"
        graph  =   "cpu: cpmCPUTotal5min"
        
    [[switch-mem]]
        ds    =   "ciscoMemoryPoolUsed, ciscoMemoryPoolFree"
        graph  =   "memory: ciscoMemoryPoolUsed ciscoMemoryPoolFree"
    
    ### Interface target types.
    
    [[frame-interface]]
        ds          = 	"""frCircuitReceivedOctets,
        frCircuitSentOctets,
        frCircuitReceivedFECNs, 
        frCircuitReceivedBECNs"""
        graph        = 	"""Octets: frCircuitReceivedOctets frCircuitSentOctets,
        FECN/BECN: frCircuitReceivedFECNs 
        frCircuitReceivedBECNs"""
    [[cisco-ap-interface]]
        ds          = 	"""ifInOctets, ifOutOctets,
        ifInErrors, ifOutErrors"""
        graph        = 	"""Octets: ifInOctets ifOutOctets,
        Errors: ifInErrors ifOutErrors"""
    
    
    [[cisco-interface]]
        ds          = 	"""ifInOctets, ifOutOctets, ifInErrors,
        ifOutErrors, ifInUcastPackets, ifOutUcastPackets,
        locIfInRunts, locIfInGiants, locIfInCRC, locIfInFrame,
        locIfInOverrun, locIfInIgnored, locIfInAbort,
        locIfResets, locIfCarTrans, locIfCollisions,
        locIfInputQueueDrops, locIfOutputQueueDrops"""
        graph        = 	"""Octets: ifInOctets ifOutOctets,
        UcastPackets: ifInUcastPackets ifOutUcastPackets,
        Collisions: locIfCollisions,
        QueueDrops: locIfInputQueueDrops 
        locIfOutputQueueDrops,
        Errors: locIfInCRC locIfInFrame locIfInOverrun
        locIfInAbort locIfResets locIfCarTrans"""
    [[cisco-interface-nu]]
        ds          = 	"""ifInOctets, ifOutOctets, ifInErrors,
        ifOutErrors, ifInUcastPackets, ifOutUcastPackets,
        ifInNUcastPackets, ifOutNUcastPackets,
        locIfInRunts, locIfInGiants, locIfInCRC, locIfInFrame,
        locIfInOverrun, locIfInIgnored, locIfInAbort,
        locIfResets, locIfCarTrans, locIfCollisions,
        locIfInputQueueDrops, locIfOutputQueueDrops"""
        graph        = 	"""Octets: ifInOctets ifOutOctets,
        UcastPackets: ifInUcastPackets ifOutUcastPackets,
        NUcastPackets: ifInNUcastPackets ifOutNUcastPackets,
        Collisions: locIfCollisions,
        QueueDrops: locIfInputQueueDrops 
        locIfOutputQueueDrops,
        Errors: locIfInCRC locIfInFrame locIfInOverrun
        locIfInAbort locIfResets locIfCarTrans"""
    
    [[cisco-interface-hc]]
        ds          = 	"""ifHCInOctets, ifHCOutOctets, ifInErrors,
        ifOutErrors, ifHCInUcastPkts, ifHCOutUcastPkts,
        locIfInRunts, locIfInGiants, locIfInCRC, locIfInFrame,
        locIfInOverrun, locIfInIgnored, locIfInAbort,
        locIfResets, locIfCarTrans, locIfCollisions,
        locIfInputQueueDrops, locIfOutputQueueDrops"""
        graph        = 	"""Octets: ifHCInOctets ifHCOutOctets,
        UcastPackets: ifHCInUcastPackets ifHCOutUcastPackets,
        Collisions: locIfCollisions,
        QueueDrops: locIfInputQueueDrops 
        locIfOutputQueueDrops,
        Errors: locIfInCRC locIfInFrame locIfInOverrun
        locIfInAbort locIfResets locIfCarTrans"""
    [[cisco-interface-nu-hc]]
        ds          = 	"""ifHCInOctets, ifHCOutOctets, ifInErrors,
        ifOutErrors, ifHCInUcastPkts, ifHCOutUcastPkts,
        ifHCInMulticastPkts, ifHCOutMulticastPkts,
        ifHCInBroadcastPkts, ifHCOutBroadcastPkts,
        locIfInRunts, locIfInGiants, locIfInCRC, locIfInFrame,
        locIfInOverrun, locIfInIgnored, locIfInAbort,
        locIfResets, locIfCarTrans, locIfCollisions,
        locIfInputQueueDrops, locIfOutputQueueDrops"""
        graph        = 	"""Octets: ifHCInOctets ifHCOutOctets,
        UcastPackets: ifInUcastPackets ifOutUcastPackets,
        McastPackets: ifHCInMulticastPackets ifHCOutMulticastPackets,
        BcastPackets: ifHCInBroadcastPackets ifHCOutBroadcastPackets,
        Collisions: locIfCollisions,
        QueueDrops: locIfInputQueueDrops 
        locIfOutputQueueDrops,
        Errors: locIfInCRC locIfInFrame locIfInOverrun
        locIfInAbort locIfResets locIfCarTrans"""
    
    [[dial-peer]]
        ds          = 	"""dialCtlPeerStatsConnectTime,
        dialCtlPeerStatsChargedUnits,
        dialCtlPeerStatsSuccessCalls,
        dialCtlPeerStatsFailCalls,
        dialCtlPeerStatsAcceptCalls,
        dialCtlPeerStatsRefuseCalls"""
        graph        = 	"""ConnectTime: dialCtlPeerStatsConnectTime,
        Calls: dialCtlPeerStatsSuccessCalls
        dialCtlPeerStatsFailCalls
        dialCtlPeerStatsAcceptCalls
        dialCtlPeerStatsRefuseCalls"""
    
    [[rate-limit]]
        ds          = 	"""ccarStatSwitchedPkts,ccarStatSwitchedBytes,
        ccarStatFilteredPkts,ccarStatFilteredBytes"""
        graph        = 	"""Shaping-Pkts: ccarStatSwitchedPkts ccarStatFilteredPkts,
        Shaping-Bytes: ccarStatSwitchedBytes ccarStatFilteredBytes"""
    [[cisco-cbwfq-qos]]
        ds          = 	"""cbQosCMPrePolicyByte, cbQosCMPostPolicyByte,
        cbQosCMPrePolicyPkt, cbQosCMDropPkt, cbQosCMDropByte"""
        graph        = 	"""PrePolicyPkt: cbQosCMPrePolicyPkt,
        PrePolicyByte: cbQosCMPrePolicyByte,
        PostPolicyByte: cbQosCMPostPolicyByte,
        DropPkts: cbQosCMDropPkt,
        DropBytes: cbQosCMDropByte"""
    
    [[cisco-vip-cpu]]
        ds      =   "slotcpu1min, slotcpu5min"
        graph    =   "VipCPU: slotcpu1min slotcpu5min"

###############################################################################
#
## TRIGGER definitions
#
# The trigger dictionnary defines expressions to be applied on retrieved values.
# They are referenced using the trigger variable in the Shinken configuration.
# Note the use of underscore for the Shinken configuration
# and - for the trigger-name in the Defaults file.
#
# Triggers that do not resolve correctly or contain errors will return
# unknown status and log an error message in the plugin output.
#
# For examples see: genConfig.triggers
#
###############################################################################

#[TRIGGER]

#[[trigger_name1]]
#    warning =  datasource.function(), <constant>, <operator>
#    critical = datasource.function(), datasource.function(), <operator>
#    critical = datasource.function(), <constant>, <operator>, <constant>, <operator>

#[TRIGGERGROUP]
#   trigger_group_name1 = trigger_name1, trigger_name2


###############################################################################
#
# MAP definitions dynamically find the SNMP instance
#
# REGULAR EXPRESSION MATCHES ARE NOT SUPPORTED AT THIS TIME
# They are documented in case they are implemented later on.
# The instance must fully match as passed in the check arguments
#
###############################################################################


[MAP]
    [[module-port]]
        base_oid    = .1.3.6.1.2.1.31.1.1.1.1
    #    base_oid    = ifName
    #    match       = "%module-number%/%port-number%"
    
    [[mem-stats]]
        base_oid    = .1.3.6.1.4.1.9.9.48.1.1.1.2
    #    base_oid    = ciscoMemoryPoolName
    #    match       = DRAM
    
    #[[cpu-stats]]
    #    base_oid    = .1.3.6.1.4.1.9.9.109.1.1.1.1.2
    #    base_oid    = cpmCPUTotalPhysicalIndex
    #    match       = /^.+$/
    
    # This is a neat map that will let you tie target
    # names to the extended interface descriptions that Ciscos
    # support (called "aliases" by the MIB). For example,
    # if your target name is "corporate-ds3", then do
    # this on your Cisco:
    #
    #    router#config term
    #    router(config)#int Hssi/0/0/0
    #    router(config-if)#description [corporate-ds3] 45 Mbps DS3 to Corporate
    #    router(config-if)#^Z
    #
    # And set inst to "map(alias-matches-target)" for that target.
    #[[alias-matches-target]]
    #    base_oid    =   ifAlias
    #    match       =   /^.*\\[%auto-target-name%\\].*$/

###############################################################################
#
# "GRAPH" statements define how the data should be displayed in the graphic.
# Most of the variables defined are directly mapped to the rrdtool graph tool
# that is used to generate the graphics.
#
# TODO: These statements need to be converted to Graphite templates.
#
###############################################################################


# Cisco Firewall Free Blocks
[GRAPH]
    [[aByteBlocksFree]]
        color       =   purple
        legend      =   "Available 4 byte blocks"
    [[bByteBlocksFree]]
        color       =   dark-green
        legend      =   "Available 80 byte blocks"
    [[cByteBlocksFree]]
        color       =   blue
        legend      =   "Available 256 byte blocks"
    [[dByteBlocksFree]]
        color       =   brown
        legend      =   "Available 1550 byte blocks"
    [[eByteBlocksFree]]
        color       =   grey
        legend      =   "Available 2560 byte blocks"
    
    # Cisco Firewall Chassis Stats
    [[Pcpu1min]]
        units       =   "%"
        color       =   dark-green
        draw-as     =   AREA
        y-axis      =   "Percent CPU utilization"
        legend      =   "1 minute CPU utilization"
        # fixed y-axis, since this is a percentage
        y-min       =   0
        y-max       =   100
        show-max    =   true
        max-color   =   neongrn
        draw-max-as =   LINE2
    
    [[Pcpu5min]]
        units       =   "%"
        color       =   blue
        draw-as     =   AREA
        y-axis      =   "Percent CPU utilization"
        legend      =   "5 minute CPU utilization"
        # fixed y-axis, since this is a percentage
        y-min       =   0
        y-max       =   100
    
    # Aironet Wireless Access Points
    [[AccessPoints]]
        color       =   dark-red
        draw-as     =   LINE3
        legend      =   "Access points"
    [[Clients-Associated]]
        color       =   dark-green
        draw-as     =   LINE3
        legend      =   "Clients presently associated"
    [[Clients-Total]]
        color       =   blue
        draw-as     =   LINE3
        legend      =   "Total clients on subnet"
    [[Bridges-Associated]]
        color       =   brown
        draw-as     =   LINE3
        legend      =   "Bridges presently associated"
    [[Bridges-Total]]
        color       =   grey
        draw-as     =   LINE3
        legend      =   "Total bridges on subnet"
    
    # Altiga VPN3000
    [[vpnCPUutil]]
        units	=   "%"
    #    color	=   dark-green
        draw-as	=   AREA
        y-axis	=   "Percent CPU utilisation"
        legend	=   "CPU utilisation"
    #   fixed y-axis, since this is a percentage
    #   y-min	=   0
    #   y-max       =   100
    
    [[vpnCPUtemp]]
    #    color	=   dark-green
    #    draw-as	=   AREA
        y-axis	=   "degrees Centigrade"
        units	=   "&#176"
        space	=   ""
        legend 	=   "CPU temperature in C"
        precision	=   integer
    
    [[vpnCagetemp]]
    #    color	=   blue
        draw-as	=   AREA
        y-axis	=   "degrees Centigrade"
        units	=   "&#176"
        space	=   ""
        legend	=   "Cage temperature in C"
    
    [[vpnActivePhase1ipSecSessions]]
        color	=   blue
        draw-as	=   AREA
        space	=   ""
        legend	=   "Active ipSec sessions"
        y-axis	=   "SessionsIpSec"
        units	=   "SessionsIpSec"
    
    [[alTotalSessionCount]]
        color	=   green
        draw-as	=   AREA
        space	=   ""
        legend	=   "New Sessions"
        y-axis	=   "SessionsNew"
        units	=   "SessionsNew"
    
    [[alActiveSessionCount]]
        color	=   green
        draw-as	=   AREA
        space	=   ""
        legend	=   "Active sessions"
        y-axis	=   "SessionsActive"
        units	=   "SessionsActive"
    
    [[alActiveLanToLanSessionCount]]
        color	=   yellow
        draw-as	=   AREA
        space	=   ""
        legend	=   "Active LanToLan sessions"
        y-axis	=   "Sessions"
        units	=   "SessionsLanToLan"
    
    [[alActiveRemoteAccessSessionCount]]
        color	=   green
        draw-as	=   STACK
        space	=   ""
        legend	=   "Active RAS sessions"
    #    y-axis	=   "SessionsRAS"
        units	=   "SessionsRAS"
    
    [[alActiveManagementSessionCount]]
        color	=   dark-green
        draw-as	=   STACK
        space	=   ""
        legend	=   "Active management sessions"
    #    y-axis	=   "SessionsMgmt"
        units	=   "SessionsMgmt"
    
    [[alActiveSessionMaxUsers]]
        color	=   blue
        space	=   ""
        legend	=   "Max number of sessions"
    #    y-axis	=   "SessionsMax"
        units	=   "SessionsMax"
    
    [[alPptpStatsTotalSessions]]
        color	=   blue
        draw-as	=   AREA
        space	=   ""
        legend	=   "PPTP Sessions"
        y-axis	=   "SessionsPptp"
        units	=   "SessionsPptp"
    
    # PIX Number of connections active in PIX
    [[pixConnections]]
        color       =   dark-green
        draw-as     =   AREA
        legend      =   "Number of connections in PIX globally"
        y-axis      =   "Connections"
        units       =   "conn"
        y-min	=   0
        show-max	=   true
        max-color	=   neongrn
        draw-max-as	=   LINE2
    
    [[rttMonLatestHTTPOperDNSRTT]]
        color       =   dark-blue
        draw-as     =   LINE1
        legend      =   "Round-trip for DNS resolution"
        y-axis      =   "Milliseconds"
        inf-marker  =   true
        units       =   "ms"
        y-min       =   0
    
    [[rttMonLatestHTTPOperTCPConnectRTT]]
        color       =   pink
        draw-as     =   LINE1
        legend      =   "Round-trip time for TCP handshake"
        y-axis      =   "Milliseconds"
        inf-marker  =   true
        units       =   "ms"
        y-min       =   0
    
    [[rttMonLatestHTTPOperRTT]]
        color       =   dark-green
        draw-as     =   AREA
        legend      =   "Round-trip time to remote web server"
        y-axis      =   "Milliseconds"
        inf-marker  =   true
        units       =   "ms"
        y-min       =   0
        show-max    =   true
        max-color   =   neongrn
    
    [[rttMonLatestFtpRttOperCompletionTime]]
        color       =   dark-green
        draw-as     =   AREA
        legend      =   "Round-trip time to remote FTP server"
        y-axis      =   "Seconds"
        inf-marker  =   true
        units       =   "s"
        y-min       =   0
        scale       =   "1000,/"
        show-max	=   false
        max-color	=   neongrn
        draw-max-as	=   LINE2
    
    [[rttMonLatestRttOperCompletionTime]]
        color       =   dark-green
        draw-as     =   AREA
        legend      =   "Round-trip time to remote router"
        y-axis      =   "Milliseconds"
        inf-marker  =   true
        units       =   "ms"
        y-min	=   0
        show-max	=   false
        max-color	=   neongrn
        draw-max-as	=   LINE2
    
    [[rttMonLatestRttOperSense]]
        color       =   dark-red
        draw-as     =   LINE1
        legend      =   "Op Val 1(Ok)2(Disc)4(TmOut)5(Busy)6(NoConn)7(Drop)8(BadSeq)9(BadData)10(App)16(Error)"
        y-axis      =   "Operation Value"
        units       =   "RTT operational value"
        inf-marker  =   true
        y-min	=   0
    
    [[rttMonLatestJitterOperRTTMin]]
        color	=   blue
        draw-as	=   LINE2
        legend	=   "Min RTT to remote router"
        y-axis	=   "Milliseconds"
        inf-marker	=   true
        units	=   "ms"
        y-min	=   0
        show-max	=   true
        max-color	=   neongrn
        draw-max-as	=   LINE1
    
    [[rttMonLatestJitterOperRTTMax]]
        color	=   blue
        draw-as	=   LINE2
        legend	=   "Max RTT to remote router"
        y-axis	=   "Milliseconds"
        inf-marker	=   true
        units	=   "ms"
        y-min	=   0
        show-max	=   true
        max-color	=   neongrn
        draw-max-as	=   LINE1
    
    [[rttMonLatestJitterOperMOS]]
        color       =   blue
        draw-as     =   LINE1
        legend      =   "MOS (Mean Opinion Score)"
        y-axis      =   "1.00 - 5.00"
        scale       =   "100,/"
        units       =   "units"
        inf-marker  =   true
        y-min       =   0
    
    [[rttMonLatestJitterOperICPI]]
        color       =   dark-green
        draw-as     =   AREA
        legend      =   "CPIF (Calculated Planning Impairment Factor)"
        y-axis      =   " "
        units       =   "units"
        inf-marker  =   true
        y-min       =   0
    
    [[rttMonLatestJitterOperPacketLossSD]]
        color       =   blue
        draw-as     =   LINE1
        legend      =   "Packet Loss Source to Destination"
        y-axis      =   "Packets"
        inf-marker  =   true
        units       =   "pkts"
        y-min       =   0
        show-max    =   false
    #    max-color   =   dark-blue
    #    draw-max-as =   LINE2
    
    [[rttMonLatestJitterOperPacketLossDS]]
        color       =   green
        draw-as     =   AREA
        legend      =   "Packet Loss Destination to Source"
        y-axis      =   "Packets"
        inf-marker  =   true
        units       =   "pkts"
        y-min       =   0
        show-max    =   false
    
    #    max-color   =   neongrn
    #    draw-max-as =   LINE2
    
    [[rttMonLatestJitterOperPacketOutOfSequence]]
        color       =   dark-red
        draw-as     =   LINE1
        legend      =   "Packet Out of Sequence"
        y-axis      =   "Packets"
        inf-marker  =   true
        units       =   "pkts"
        y-min       =   0
        show-max    =   false
        max-color   =   red
        draw-max-as =   LINE2
    
    [[rttMonLatestJitterOperPacketMIA]]
        color       =   orange
        draw-as     =   LINE1
        legend      =   "Packets Missing In Action"
        y-axis      =   "Packets"
        inf-marker  =   true
        units       =   "pkts"
        y-min       =   0
        show-max    =   false
        max-color   =   yellow
        draw-max-as =   LINE2
    
    [[rttMonLatestJitterOperPacketLateArrival]]
        color       =   purple
        draw-as     =   LINE1
        legend      =   "Late Arriving Packets"
        y-axis      =   "Packets"
        inf-marker  =   true
        units       =   "pkts"
        y-min       =   0
        show-max    =   false
        max-color   =   purply
        draw-max-as =   LINE2
    
    [[rttMonLatestJitterOperAvgJitter]]
        color       =   dark-green
        draw-as     =   AREA
        legend      =   "Average Jitter"
        y-axis      =   "Milliseconds"
        inf-marker  =   true
        units       =   "ms"
        y-min       =   0
        show-max    =   false
        max-color   =   neongrn
        draw-max-as =   LINE2
    
    [[rttMonLatestJitterOperAvgJitterSD]]
        color       =   dark-red
        draw-as     =   LINE1
        legend      =   "Average Jitter Source to Destination"
        y-axis      =   "Milliseconds"
        inf-marker  =   true
        units       =   "ms"
        y-min       =   0
        show-max    =   false
        max-color   =   red
        draw-max-as =   LINE2
    
    [[rttMonLatestJitterOperAvgJitterDS]]
        color       =   dark-blue
        draw-as     =   LINE1
        legend      =   "Average Jitter Destination to Source"
        y-axis      =   "Milliseconds"
        inf-marker  =   true
        units       =   "ms"
        y-min       =   0
        show-max    =   false
        max-color   =   blue
        draw-max-as =   LINE2
    
    [[rttMonLatestJitterOperAvgJitterOWSD]]
        color       =   orange
        draw-as     =   LINE1
        legend      =   "Average Jitter One Way Source to Destination"
        y-axis      =   "Milliseconds"
        inf-marker  =   true
        units       =   "ms"
        y-min       =   0
        show-max    =   false
        max-color   =   yellow
        draw-max-as =   LINE2
    
    [[rttMonLatestJitterOperAvgJitterOWDS]]
        color       =   purple
        draw-as     =   LINE1
        legend      =   "Average Jitter One Way Destination to Source"
        y-axis      =   "Milliseconds"
        inf-marker  =   true
        units       =   "ms"
        y-min       =   0
        show-max    =   false
        max-color   =   purply
        draw-max-as =   LINE2
    
    # Cisco Chassis
    [[cpu1min]]
        units	=   "%"
        color	=   dark-green
        draw-as	=   AREA
        y-axis 	=   "Percent CPU utilization"
        legend 	=   "1 minute CPU utilization"
        # fixed y-axis, since this is a percentage
        y-min	=   0
        y-max  	=   100
        show-max    =   true
        max-color   =   neongrn
        draw-max-as =   LINE2
    
    [[cpu5min]]
        units	=   "%"
        color	=   blue
        y-axis	=   "Percent CPU utilization"
        legend 	=   "5 minute CPU utilization"
        # fixed y-axis, since this is a percentage
        y-min	=   0
        y-max	=   100
    
    [[tempInlet]]
        color	=   dark-green
        draw-as	=   AREA
        y-axis 	=   "degrees Celsius"
        units	=   "&#176;C"
    #    y-axis      =   "degrees Farenheit"
    #    units       =   "&#176;F"
    #    scale       =   9,*,5,/,32,+
        space	=   ""
        legend	=   "Inlet temperature"
        precision	=   integer
    
    [[tempOutlet]]
        color   	=   blue
        y-axis  	=   "degrees Celsius"
        units	=   "&#176;C"
    #    y-axis      =   "degrees Farenheit"
    #    units       =   "&#176;F"
    #    scale       =   9,*,5,/,32,+
        space	=   ""
        legend  	=   "Outlet temperature"
        precision	=	integer
    
    [[mem5minUsed]]
        color	=   dark-green
        draw-as	=   AREA
        y-min	=   0
        y-axis 	=   "Bytes"
        legend 	=   "5 minute used memory"
    
    [[mem5minFree]]
        color   	=   blue
        draw-as	=   LINE2
        y-axis  	=   "Bytes"
        legend  	=   "5 minute free memory"
    
    [[processorRAM]]
        color   	=   magenta
        draw-as	=   LINE1
        y-axis  	=   "Bytes"
        legend  	=   "Total processor RAM"
    
    # Interfaces
    
    [[locIfCollisions]]
        color       =   red
        y-axis      =   "collisions per second"
        legend      =   "Collisions"
        units       =   "coll/sec"
    
    [[locIfInputQueueDrops]]
        y-axis      =   "packets per second"
        legend      =   "Input queue drops"
        units       =   "pkt/sec"
    
    [[locIfOutputQueueDrops]]
        y-axis      =   "output queue drops"
        legend      =   "Output queue drops"
        units       =   "pkt/sec"
    
    [[locIfInCRC]]
        y-axis      =   "crc errors"
        legend      =   "CRC errors"
        scale       =   300,*
        units       =   "errors"
        draw-as     =   AREA
    
    [[locIfInFrame]]
        y-axis      =   "frame errors"
        legend      =   "Frame errors"
        scale       =   300,*
        units       =   "errors"
        draw-as     =   STACK
    
    [[locIfInOverrun]]
        y-axis      =   "overrun errors"
        legend      =   "Overrun errors"
        scale       =   300,*
        units       =   "errors"
        draw-as     =   STACK
    
    [[locIfInAbort]]
        y-axis      =   "aborted packets"
        legend      =   "Aborts"
        scale       =   300,*
        units       =   "packets"
        draw-as     =   STACK
    
    [[locIfResets]]
        y-axis      =   "internal if resets"
        legend      =   "Internal interface resets"
        scale       =   300,*
        units       =   "resets"
        draw-as     =   STACK
    
    [[locIfCarTrans]]
        y-axis      =   "carrier signal transition"
        legend      =   "Carrier signal transitions"
        scale       =   300,*
        units       =   "carrier transisitions"
        draw-as     =   STACK
    
    [[frCircuitReceivedFECNs]]
        y-axis      =   "FECNs"
        legend      =   "Forward congestion"
        units       =   "frames/sec"
    
    [[frCircuitReceivedBECNs]]
        y-axis      =   "BECNs"
        legend      =   "Backward congestion"
        units       =   "frames/sec"
    
    [[frCircuitReceivedOctets]]
        color       =   dark-green
        draw-as     =   AREA
        y-axis      =   "bits per second"
        units       =   "bits/sec"
        legend      =   "Bits in"
        scale       =   8,*
        y-min       =   0
        show-max    =   true
        max-color   =   green
        draw-max-as =   LINE1
    
    [[frCircuitSentOctets]]
        color       =   blue
        y-axis      =   "bits per second"
        units       =   "bits/sec"
        legend      =   "Bits out"
        scale       =   8,*
        y-min       =   0
        show-max    =   true
        max-color   =   magenta
        draw-max-as =   LINE1
    
    [[dialCtlPeerStatsConnectTime]]
        color       =   dark-green
        draw-as     =   AREA
        y-axis      =   "seconds"
        units       =   "sec"
        legend      =   "Peer connect time"
    
    [[dialCtlPeerStatsChargedUnits]]
        color       =   dark-green
        draw-as     =   AREA
        y-axis      =   "calls"
        units       =   "calls"
        legend      =   "Successfull calls"
        y-min       =   0
    
    [[dialCtlPeerStatsSuccessCalls]]
        color       =   dark-green
        draw-as     =   AREA
        y-axis      =   "calls"
        units       =   "calls"
        legend      =   "Successfull calls"
        scale       =   300,*
    
    [[dialCtlPeerStatsFailCalls]]
        color       =   red
        draw-as     =   STACK
        y-axis      =   "calls"
        units       =   "calls"
        legend      =   "Failed calls"
        scale       =   300,*
    
    [[dialCtlPeerStatsAcceptCalls]]
        color       =   blue
        draw-as     =   LINE1
        y-axis      =   "calls"
        units       =   "calls"
        legend      =   "Accepted calls"
        scale       =   300,*
    
    [[dialCtlPeerStatsRefuseCalls]]
        color       =   magenta
        draw-as     =   LINE1
        y-axis      =   "calls"
        units       =   "calls"
        legend      =   "Refused calls"
        scale       =   300,*
    
    [[chassisTempAlarm]]
        color       =   red
        draw-as     =   AREA
        y-axis      =   "state"
        units       =   ""
        legend      =   "Temp alarm"
        y-max       =   8
        y-min       =   -3
        scale       =   "1,-"
        precision   =   0
        show-avg-max = 0
    
    [[chassisFanStatus]]
        color       =   blue
        draw-as     =   STACK
        y-axis      =   "status"
        units       =   ""
        legend      =   "Fan Status"
        scale       =   "2,-"
        precision   =   0
        show-avg-max = 0
    
    [[chassisPs1Status]]
        color       =   magenta
        draw-as     =   STACK
        y-axis      =   "status"
        units       =   ""
        legend      =   "PS1 Status"
        scale       =   "2,-"
        precision   =   0
        show-avg-max = 0
    
    [[chassisPs2Status]]
        color       =   green
        draw-as     =   STACK
        y-axis      =   "status"
        units       =   ""
        legend      =   "PS2 Status"
        scale       =   "2,-"
        precision   =   0
        show-avg-max = 0
    
    [[slotcpu1min]]
        units       =   "%"
        color       =   dark-green
        draw-as     =   AREA
        y-axis      =   "Percent CPU utilization"
        legend      =   "1 minute CPU utilization"
        # fixed y-axis, since this is a percentage
        y-min       =   0
        y-max       =   100
        show-max    =   true
        max-color   =   neongrn
        draw-max-as =   LINE2
    
    [[slotcpu5min]]
        units       =   "%"
        color       =   blue
        y-axis      =   "Percent CPU utilization"
        legend      =   "5 minute CPU utilization"
        # fixed y-axis, since this is a percentage
        y-min       =   0
        y-max       =   100
    
    [[tempState]]
        legend  =   """Current temperature state:<br><ul><li>Normal(1)<li>Warning
    (2)<li>Critical (3)<li>Shutdown (4)<li>Not Present(5)<li>Not Functioning (6)</ul>"""
    
    [[cseL2ForwardedTotalPkts]]
        color       =   dark-green
        draw-as     =   AREA
        y-axis      =   "packets per second"
        units       =   "pkt/sec"
        legend      =   "Average num packets forwarded at layer 2"
        show-max    =   true
        max-color   =   neongrn
        draw-max-as =   LINE2
    
    [[cseL2NewAddressLearns]]
        color       =   dark-green
        draw-as     =   AREA
        y-axis      =   "addresses per second"
        units       =   "addr/sec"
        legend      =   "Average addresses learned"
    
    [[cseL2DstAddrLookupMisses]]
        color       =   blue
        y-axis      =   "misses per second"
        units       =   "miss/sec"
        legend      =   "Average address lookup misses"
    
    [[cseL2AddrLearnFailures]]
        color       =   magenta
        y-axis      =   "failures per second"
        units       =   "fails/sec"
        legend      =   "Average address learn failures"
    
    [[cbQosCMPrePolicyByte]]
        legend      =   "cbQosCMPrePolicyByte"
        y-axis      =   "bits per second"
        units       =   "bit/sec"
        scale       =   8,*
        bytes       =   true
        use-gprint  =   false
        show-max    =   false
    
    [[cbQosCMPostPolicyByte]]
        legend      =   "cbQosCMPostPolicyByte"
        y-axis      =   "bits per second"
        units       =   "bit/sec"
        scale       =   8,*
        bytes       =   true
        use-gprint  =   false
        show-max    =   false
    
    [[cbQosCMDropByte]]
        legend      =   "cbQosCMDropByte"
        y-axis      =   "bits per second"
        units       =   "bit/sec"
        scale       =   8,*
        bytes       =   true
        use-gprint  =   false
        show-max    =   false
    
    [[cbQosCMPrePolicyPkt]]
        legend      =   "cbQosCMPrePolicyPkt"
        y-axis      =   "packets per second"
        units       =   "pkt/sec"
        bytes       =   true
        use-gprint  =   false
        show-max    =   false
    
    [[cbQosCMDropPkt]]
        legend      =   "cbQosCMDropPkt"
        y-axis      =   "packets per second"
        units       =   "pkt/sec"
        bytes       =   true
        use-gprint  =   false
        show-max    =   false
    
    [[bandwidthUsageCurrent]]
        color       =   dark-green
        draw-as     =   AREA
        y-axis      =   "Mbit/sec"
        units       =   "Mbit/sec"
        legend      =   "Bandwidth currently consumed"
    
    [[bandwidthUsagePeak]]
        color       =   dark-green
        draw-as     =   AREA
        y-axis      =   "Mbit/sec"
        units       =   "Mbit/sec"
        legend      =   "Highest bandwidth utilized"
    
    [[sysInfoUtilDisplay]]
        color       =   dark-green
        draw-as     =   AREA
        y-axis      =   "utilization meter LED"
        units       =   ""
        legend      =   "Number of utilization meter LEDs currently lit on the front panel"
